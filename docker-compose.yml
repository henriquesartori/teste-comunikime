services:

  sqlserver:
    build: ./docker/database
    container_name: comunikime-db
    restart: always
    env_file: 
      - .env
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      SA_PASSWORD: ${DB_PASS}
      ACCEPT_EULA: "Y"
    ports:
      - "${DB_PORT}:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - comunikime-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S ${DB_HOST} -U sa -P ${DB_PASS} -C -Q 'SELECT 1'"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:latest
    container_name: comunikime-redis
    env_file: 
      - .env
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - comunikime-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  api:
    build: 
      context: .
      dockerfile: ./docker/api/Dockerfile
    container_name: comunikime-api
    restart: always
    env_file:
      - .env
    ports:
      - "${API_PORT}:3000"
    networks:
      - comunikime-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      
volumes:
  sqlserver_data:
  redis_data:

networks:
  comunikime-network:
    driver: bridge